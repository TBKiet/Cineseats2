<section id="seatSection">
    <div class="screen-container">
        <div class="screen">
            <div class="screen-text">Screen</div>
        </div>
    </div>

    <div class="theater-container">
        <div class="seating-container">
            {{#each rows}}
            <div class="seat-row">
                <div class="seat-row-label">{{rowLetter}}</div>
                {{#each seats}}
                <div class="seat {{status}} {{#if (eq seatVisibility 0)}} invisible{{/if}}" {{#if seatVisibility}}
                    id="{{assignSeatId @index}}" {{/if}} data-seatId="{{seatID}}">
                    {{rowLetter}}{{padZero seatNumber}}
                </div>
                {{/each}}
            </div>
            {{/each}}
        </div>
    </div>

    <div class="legend-container">
        <div class="legend-item">
            <div class="seat available"></div>
            <span class="legend-text">Ghế thường</span>
        </div>
        <div class="legend-item">
            <div class="seat unavailable"></div>
            <span class="legend-text">Ghế đã bán</span>
        </div>
        <div class="legend-item">
            <div class="seat selected"></div>
            <span class="legend-text">Ghế đang chọn</span>
        </div>
    </div>
    <div id="rectangle"></div>

    <div class="bottom-rectangle">
        <div class="movie-infos">
            <h3 class="movie-title">{{name_vn}}</h3>
            <div class="show-details">
                <span class="theater-name">{{theaterName}}</span>
                <span class="separator">•</span>
                <span class="showtime">{{showtimeDate}}, {{showtimeTime}}</span>
            </div>
        </div>
        <div class="timer-booking-container">
            <div class="booking-info">
                <div class="total-price">
                    <span>Tổng tiền: </span>
                    <span id="total-price-display">0 đ</span>
                </div>
                <button class="book-button">Đặt vé</button>
            </div>
            <div class="timer-container">
                <span class="timer-label">Thời gian giữ vé:</span>
                <span class="countdown">5:00</span>
            </div>
        </div>
    </div>
</section>

<!-- Hidden Payment Section: show after user clicks "Đặt vé" -->
<section id="paymentSection" style="display: none;">
    <div class="payment-container">
        <div class="ticket-preview">
            <div class="ticket">
                <div class="left">
                    <div class="image" style=" background: url({{image}}); background-size: cover;">
                        <div class="ticket-number"></div>
                    </div>
                    <div class="ticket-info">
                        <p class="date">
                            <span>{{dayOfWeek}}</span>
                            <span class="june-29">{{formattedDate}}</span>
                            <span>{{year}}</span>
                        </p>
                        <div class="show-name">
                            <h1>{{name_vn}}</h1>
                            {{!-- <h2>Tập đặc biệt 2</h2> --}}
                        </div>
                        <div class="time">
                            <p>Số Vé: <span id="seatCount">0</span></p>
                            <p>Tổng tiền: <span id="payment-total-price-display">0 đ</span></p>
                            <p>{{roomName}} <span>|</span> {{showtimeTime}}</p>
                        </div>
                        <p class="location">
                            <span>{{theaterName}}</span>
                            <span class="separator">
                                <i class="fa-solid fa-film"></i>
                            </span>
                            <span>{{city}}</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="left-section">
            <div class="promo-section">
                <h3>Khuyến mãi</h3>
                <div class="promo-input">
                    <input type="text" placeholder="Mã khuyến mãi">
                    <button class="apply-btn">Áp dụng</button>
                </div>
            </div>
            <div class="payment-methods">
                <h3>Phương thức thanh toán</h3>
                <div class="payment-options">
                    <label class="payment-option">
                        <input type="radio" name="payment" value="MoMo">
                        <img src="momo-logo.png" alt="MoMo">
                        <span>Ví Điện Tử MoMo</span>
                    </label>
                    <label class="payment-option">
                        <input type="radio" name="payment" value="VNPAY">
                        <img src="vnpay-logo.png" alt="VNPAY">
                        <span>VNPAY</span>
                    </label>
                </div>
            </div>
        </div>
        <div class="action-buttons">
            <button class="back-btn">
                <i class="fas fa-arrow-left mr-2"></i> Quay lại
            </button>
            <button class="payment-btn">
                Thanh toán <i class="fas fa-arrow-right ml-2"></i>
            </button>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const paymentBtn = document.querySelector('.payment-btn');
        paymentBtn.addEventListener('click', function (e) {
            e.preventDefault();

            // Get the selected payment option
            const selectedPaymentOption = document.querySelector('input[name="payment"]:checked').value;
            if (selectedPaymentOption === 'VNPAY') {
                // Create a form element
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/payment/create_payment_url'; // Replace with your actual payment processing endpoint

                // Example: Add necessary hidden inputs
                const amountText = document.getElementById('payment-total-price-display').innerText;
                const amount = amountText.replace(/\D/g, ''); // Extract numeric value
                // Create and append amount input
                const inputAmount = document.createElement('input');
                inputAmount.type = 'hidden';
                inputAmount.name = 'totalAmount';
                inputAmount.value = amount;
                form.appendChild(inputAmount);
                // Create and append paymentMethod input
                const inputPaymentMethod = document.createElement('input');
                inputPaymentMethod.type = 'hidden';
                inputPaymentMethod.name = 'paymentMethod';
                inputPaymentMethod.value = selectedPaymentOption;
                form.appendChild(inputPaymentMethod);

                // Create and append selectedSeats input
                const inputSelectedSeats = document.createElement('input');
                inputSelectedSeats.type = 'hidden';
                inputSelectedSeats.name = 'selectedSeats';
                const seatIDs = selectedSeats.map(seat => seat.seatID);
                seatIDs.forEach(seatID => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'selectedSeats[]';
                    input.value = seatID;
                    form.appendChild(input);
                });

                // Create and append showtimeId input
                const inputShowtimeId = document.createElement('input');
                inputShowtimeId.type = 'hidden';
                inputShowtimeId.name = 'showtimeId';
                inputShowtimeId.value = '{{showtimeId}}';
                form.appendChild(inputShowtimeId);

                // Append the form to the body and submit it
                document.body.appendChild(form);
                form.submit();
            } else {
                // Handle other payment methods if necessary
                // For example, redirect to a different payment gateway or submit a different form
                alert('Chức năng thanh toán cho phương thức này chưa được triển khai.');
            }
        });
        const seatElements = document.querySelectorAll('.seat.available:not(.invisible)');
        const totalPriceDisplay = document.getElementById('total-price-display');
        const paymentTotalPriceDisplay = document.getElementById('payment-total-price-display'); // Added
        const seatPrice = 50;
        let selectedSeats = [];

        // VND formatter
        const formatter = new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
            minimumFractionDigits: 0
        });

        function updateBookingInfo() {
            const totalPrice = selectedSeats.length * seatPrice * 1000;
            const formattedPrice = formatter.format(totalPrice);
            totalPriceDisplay.textContent = formattedPrice; // Pass to bottom rectangle
            paymentTotalPriceDisplay.textContent = formattedPrice; // Pass to payment section
        }

        // Toggle seat selection
        seatElements.forEach(seat => {
            seat.addEventListener('click', () => {
                const seatID = seat.getAttribute('data-seatId');
                const seatText = seat.textContent.trim(); // e.g., "A1"
                const rowLetter = seatText.charAt(0); // "A"
                const seatNumber = parseInt(seatText.slice(1), 10); // 1

                if (!seat.classList.contains('selected')) {
                    // Get all selected seats in the same row
                    const selectedInRow = selectedSeats.filter(s => s.row === rowLetter);
                    // Tentatively add the new seat
                    const newSelectedInRow = [...selectedInRow, { row: rowLetter, number: seatNumber, seatID: seatID }];
                    // Extract and sort seat numbers
                    const seatNumbers = newSelectedInRow.map(s => s.number).sort((a, b) => a - b);

                    // Check for single-seat gaps
                    let hasSingleSeatGap = false;
                    for (let i = 1; i < seatNumbers.length; i++) {
                        if (seatNumbers[i] - seatNumbers[i - 1] === 2) {
                            hasSingleSeatGap = true;
                            break;
                        }
                    }

                    if (hasSingleSeatGap) {
                        // Prevent selection if a single-seat gap is created
                        alert('Việc chọn ghế của bạn không được để trống 1 ghế trên cùng một hàng ghế mà bạn vừa chọn.');
                    } else {
                        // Allow selection
                        seat.classList.add('selected');
                        selectedSeats.push({ row: rowLetter, number: seatNumber, seatID: seatID });
                    }
                } else {
                    // If seat is already selected, allow deselection
                    seat.classList.remove('selected');
                    selectedSeats = selectedSeats.filter(s => !(s.row === rowLetter && s.number === seatNumber));
                }

                updateBookingInfo();
            });
        });

        const bookButton = document.querySelector('.book-button');
        const seatSection = document.getElementById('seatSection');
        const paymentSection = document.getElementById('paymentSection');
        const seatCount = document.getElementById('seatCount');

        // On click, hide seat selection, show payment
        bookButton.addEventListener('click', () => {
            if (selectedSeats.length === 0) {
                alert('Vui lòng chọn ghế trước khi đặt vé');
                return;
            }
            seatCount.textContent = selectedSeats.length;
            seatSection.style.display = 'none';
            paymentSection.style.display = 'block';
        });
        // Implement back button functionality
        const backButton = document.querySelector('.back-btn');
        backButton.addEventListener('click', () => {
            paymentSection.style.display = 'none';
            seatSection.style.display = 'block';
        });
        // Rectangle highlight logic (optional)
        function drawRectangle() {
            const topLeft = document.getElementById('seat-top-left');
            const bottomRight = document.getElementById('seat-bottom-right');
            if (topLeft && bottomRight) {
                const expandBy = 10;
                const rectangle = document.getElementById('rectangle');
                const topLeftRect = topLeft.getBoundingClientRect();
                const bottomRightRect = bottomRight.getBoundingClientRect();
                const left = topLeftRect.left + window.scrollX - expandBy / 2;
                const top = topLeftRect.top + window.scrollY - expandBy / 2;
                const width = bottomRightRect.right - topLeftRect.left + expandBy / 2 + 4;
                const height = bottomRightRect.bottom - topLeftRect.top + expandBy / 2 + 4;
                rectangle.style.left = `${left}px`;
                rectangle.style.top = `${top}px`;
                rectangle.style.width = `${width}px`;
                rectangle.style.height = `${height}px`;
                rectangle.style.position = 'absolute';
                rectangle.style.pointerEvents = 'none';
            }
        }
        drawRectangle();
        document.querySelector('.theater-container').addEventListener('scroll', drawRectangle);
        window.addEventListener('scroll', drawRectangle);
        window.addEventListener('resize', drawRectangle);
    });
</script>