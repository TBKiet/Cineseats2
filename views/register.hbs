<section>
    <div class="body-login-register">
        <div class="form-container m-4">
            <p class="title">Create account</p>
            <form class="form" action="/register" method="POST">
                <input type="text" class="input" name="username" placeholder="Username" required
                    onkeyup="checkAvailability('username', this.value)" />

                <p id="username-feedback">
                    <span id="username-icon" class="username-icon" style=" margin-right: 5px;"></span>
                    <span id="username-message"></span>
                </p>

                <input type="email" class="input" name="email" placeholder="Email" required
                    onkeyup="checkAvailability('email', this.value)" />

                <p id="email-feedback">
                    <span id="email-icon" class="email-icon" style=" margin-right: 5px;"></span>
                    <span id="email-message"></span>
                </p>
                <input type="password" class="input" name="password" placeholder="Password" required />
                <p id="password-feedback" style="display: none; margin-top: 5px;"></p>

                <input type="password" class="input" name="re_password" placeholder="Confirm Password" required />
                <p id="re-password-feedback" style="display: none; margin-top: 5px;"></p>

                <button class="form-btn" type="submit">Create account</button>
            </form>
            <p class="sign-up-label">
                Already have an account? <a class="sign-up-link" href="/login">Login</a>
            </p>

    <script>
        function isValidEmail(email) {
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        }
        function passwordStrength(password) {
            if (password.length < 8) return 0;
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            const hasNonalphas = /\W/.test(password);
            let strength = 0;
            if (hasUpperCase) strength++;
            if (hasLowerCase) strength++;
            if (hasNumbers) strength++;
            if (hasNonalphas) strength++;
            return strength;
        }
        let debounceTimer; // Timer for debouncing
        let checkEmail = false;
        let checkUsername = false;
        let checkPassword = false;
        async function checkAvailability(field, value) {
            const feedbackElement = document.getElementById(`${field}-feedback`);
            const iconElement = document.getElementById(`${field}-icon`);
            const messageElement = document.getElementById(`${field}-message`);
            // Clear feedback and hide initially
            feedbackElement.style.display = "none";
            iconElement.innerHTML = "";
            messageElement.textContent = "";
            if (value.trim() === "") return;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(async () => {
                feedbackElement.style.display = "flex";
                iconElement.innerHTML = `<div class="loader"></div>`;
                messageElement.textContent = "Checking...";
                messageElement.style.color = "blue";
                // sleep for 1 second
                await new Promise(resolve => setTimeout(resolve, 1000));
                if (field === 'email') {
                    if (!isValidEmail(value)) {
                        iconElement.innerHTML = `<div class="flex-shrink-0">
                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="error-svg">
                            <path clip-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" fill-rule="evenodd"></path>
                        </svg>
                    </div>`; // Error icon
                        messageElement.textContent = "Email is not available";
                        messageElement.style.color = "red";
                        checkEmail = false;
                        return;
                    }
                }
                try {
                    const response = await fetch('/check-availability', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ field, value })
                    });
                    const data = await response.json();
                    if (data.available) {
                        // Add success icon and message
                        iconElement.innerHTML = `
                   <div class="checkbox-wrapper-31">
  <input checked="" type="checkbox">
  <svg viewBox="0 0 35.6 35.6">
    <circle class="background" cx="17.8" cy="17.8" r="17.8"></circle>
    <circle class="stroke" cx="17.8" cy="17.8" r="14.37"></circle>
    <polyline class="check" points="11.78 18.12 15.55 22.23 25.17 12.87"></polyline>
  </svg>
</div>
`;
                        messageElement.textContent = data.message;
                        messageElement.style.color = "green";
                        if (field === 'email') checkEmail = true;
                        if (field === 'username') checkUsername = true;
                    } else {
                        // Add error feedback
                        iconElement.innerHTML = `<div class="flex-shrink-0">
                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="error-svg">
                            <path clip-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" fill-rule="evenodd"></path>
                        </svg>
                    </div>`; // Error icon
                        messageElement.textContent = data.message;
                        messageElement.style.color = "red";
                    }
                } catch (err) {
                    iconElement.innerHTML = `<div class="flex-shrink-0">
                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="error-svg">
                            <path clip-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" fill-rule="evenodd"></path>
                        </svg>
                    </div>`; // Error icon
                    messageElement.textContent = "Error checking availability.";
                    messageElement.style.color = "red";
                }
            }, 1000);
        }
        document.querySelector('input[name="password"]').addEventListener('input', (e) => {
            const password = e.target.value;
            const feedbackElement = document.getElementById('password-feedback');
            const strength = passwordStrength(password);
            if (strength === 0) {
                feedbackElement.textContent = "Password must be at least 8 characters long.";
                feedbackElement.style.color = 'red';
                feedbackElement.style.display = 'block';
            } else {
                // Determine password strength based on the criteria count
                if (strength === 1) {
                    feedbackElement.textContent = "Weak. Please improve your password.";
                    feedbackElement.style.color = 'red';
                } else if (strength === 2) {
                    feedbackElement.textContent = "Fair. Your password must be stronger.";
                    feedbackElement.style.color = 'orange';
                } else if (strength === 3) {
                    feedbackElement.textContent = "Good! Your password is strong.";
                    feedbackElement.style.color = 'yellowgreen';
                } else if (strength === 4) {
                    feedbackElement.textContent = "Excellent! Your password is very strong.";
                    feedbackElement.style.color = 'green';
                }
                feedbackElement.style.display = 'block';
                checkPassword = strength >= 3;
            }
        });
        document.querySelector('input[name="re_password"]').addEventListener('input', (e) => {
            const confirmPassword = e.target.value;
            const password = document.querySelector('input[name="password"]').value;
            const feedbackElement = document.getElementById('re-password-feedback');
            if (confirmPassword !== password) {
                feedbackElement.textContent = "Passwords do not match.";
                feedbackElement.style.color = 'red';
                feedbackElement.style.display = 'block';
            } else {
                feedbackElement.textContent = "Passwords match.";
                feedbackElement.style.color = 'green';
                feedbackElement.style.display = 'block';
            }
        });
        document.querySelector('.form').addEventListener('submit', function (event) {
            if (!checkEmail || !checkUsername || !checkPassword) {
                alert('Please check the availability of the fields.');
                event.preventDefault(); // Prevent form submission
                return;
            }
        });
    </script>
</section>