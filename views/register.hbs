<section>
    <div class="body-login-register">
        <div class="form-container">
            <p class="title">Create account</p>
            <form class="form" action="/register" method="POST">
                <input type="text"
                       class="input"
                       name="username"
                       placeholder="Username"
                       required
                       onkeyup="checkAvailability('username', this.value)"/>

                <p id="username-feedback">
                    <span id="username-icon" class="username-icon" style=" margin-right: 5px;"></span>
                    <span id="username-message"></span>
                </p>

                <input type="email"
                       class="input"
                       name="email"
                       placeholder="Email"
                       required
                       onkeyup="checkAvailability('email', this.value)"/>

                <p id="email-feedback">
                    <span id="email-icon" class="email-icon" style=" margin-right: 5px;"></span>
                    <span id="email-message"></span>
                </p>
                <input type="password" class="input" name="password" placeholder="Password" required/>
                <p id="password-feedback" style="display: none; margin-top: 5px;"></p>

                <input type="password" class="input" name="re_password" placeholder="Confirm Password" required/>
                <p id="re-password-feedback" style="display: none; margin-top: 5px;"></p>

                <button class="form-btn" type="submit">Create account</button>
            </form>
            <p class="sign-up-label">
                Already have an account?<a class="sign-up-link" href="/login">Log
                in</a>
            </p>
            <div class="buttons-container">
                <div class="github-login-button">
                    <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            width="1em"
                            height="1em"
                            class="github-icon">
                        <path
                                d="M12 .297c-6.63 0-12 5.373-12 12 0 5.302 3.438 9.8 8.205 11.387.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.725-4.042-1.415-4.042-1.415-.546-1.387-1.333-1.756-1.333-1.756-1.09-.745.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.418-1.305.76-1.605-2.665-.3-5.467-1.333-5.467-5.93 0-1.31.47-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23a11.51 11.51 0 0 1 3.004-.404c1.02.005 2.045.137 3.003.404 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.77.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.43.37.81 1.096.81 2.21 0 1.596-.015 2.88-.015 3.27 0 .325.21.698.825.577C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"/>
                    </svg>
                    <span>Sign up with Github</span>
                </div>
                <div class="google-login-button">
                    <svg
                            stroke="currentColor"
                            fill="currentColor"
                            stroke-width="0"
                            x="0px"
                            y="0px"
                            class="google-icon"
                            viewBox="0 0 48 48"
                            height="1em"
                            width="1em"
                            xmlns="http://www.w3.org/2000/svg">
                        <path
                                fill="#FFC107"
                                d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12
      c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24
      c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path>
                        <path
                                fill="#FF3D00"
                                d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657
      C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path>
                        <path
                                fill="#4CAF50"
                                d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36
      c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path>
                        <path
                                fill="#1976D2"
                                d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571
      c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path>
                    </svg>
                    <span>Sign up with Google</span>
                </div>
            </div>
        </div>
    </div>
    <script>
        let debounceTimer; // Timer for debouncing

        async function checkAvailability(field, value) {
            const feedbackElement = document.getElementById(`${field}-feedback`);
            const iconElement = document.getElementById(`${field}-icon`);
            const messageElement = document.getElementById(`${field}-message`);

            // Clear feedback and hide initially
            feedbackElement.style.display = "none";
            iconElement.innerHTML = "";
            messageElement.textContent = "";

            if (value.trim() === "") return;

            clearTimeout(debounceTimer);

            debounceTimer = setTimeout(async () => {

                feedbackElement.style.display = "flex";
                // iconElement.innerHTML = `<div class="loader"></div>`;
                // messageElement.textContent = "Checking...";
                // messageElement.style.color = "blue";
                //
                // // sleep for 1 second
                // await new Promise(resolve => setTimeout(resolve, 1000));

                if (field === 'email') {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(value)) {
                        iconElement.innerHTML = `<div class="flex-shrink-0">
                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="error-svg">
                            <path clip-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" fill-rule="evenodd"></path>
                        </svg>
                    </div>`; // Error icon
                        messageElement.textContent = "Invalid email address.";
                        messageElement.style.color = "red";
                        return;
                    }
                }
                try {
                    const response = await fetch('/check-availability', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({field, value})
                    });

                    const data = await response.json();

                    if (data.available) {
                        // Add success icon and message
                        iconElement.innerHTML = `
                   <div class="checkbox-wrapper-31">
  <input checked="" type="checkbox">
  <svg viewBox="0 0 35.6 35.6">
    <circle class="background" cx="17.8" cy="17.8" r="17.8"></circle>
    <circle class="stroke" cx="17.8" cy="17.8" r="14.37"></circle>
    <polyline class="check" points="11.78 18.12 15.55 22.23 25.17 12.87"></polyline>
  </svg>
</div>
`;
                        messageElement.textContent = data.message;
                        messageElement.style.color = "green";
                    } else {
                        // Add error feedback
                        iconElement.innerHTML = `<div class="flex-shrink-0">
                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="error-svg">
                            <path clip-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" fill-rule="evenodd"></path>
                        </svg>
                    </div>`; // Error icon
                        messageElement.textContent = data.message;
                        messageElement.style.color = "red";
                    }
                } catch (err) {
                    iconElement.innerHTML = `<div class="flex-shrink-0">
                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="error-svg">
                            <path clip-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" fill-rule="evenodd"></path>
                        </svg>
                    </div>`; // Error icon
                    messageElement.textContent = "Error checking availability.";
                    messageElement.style.color = "red";
                }
            }, 1000);
        }

        document.querySelector('input[name="password"]').addEventListener('input', (e) => {
            const password = e.target.value;
            const feedbackElement = document.getElementById('password-feedback');

            if (password.length < 8) {
                feedbackElement.textContent = "Password must be at least 8 characters long.";
                feedbackElement.style.color = 'red';
                feedbackElement.style.display = 'block';
            } else {
                const hasUpperCase = /[A-Z]/.test(password);
                const hasLowerCase = /[a-z]/.test(password);
                const hasNumbers = /\d/.test(password);
                const hasNonalphas = /\W/.test(password);

                // Count the number of criteria met
                let strength = 0;
                if (hasUpperCase) strength++;
                if (hasLowerCase) strength++;
                if (hasNumbers) strength++;
                if (hasNonalphas) strength++;

                // Determine password strength based on the criteria count
                if (strength === 1) {
                    feedbackElement.textContent = "Weak. Please improve your password.";
                    feedbackElement.style.color = 'red';
                } else if (strength === 2) {
                    feedbackElement.textContent = "Fair. Your password could be stronger.";
                    feedbackElement.style.color = 'orange';
                } else if (strength === 3) {
                    feedbackElement.textContent = "Good! Your password is strong.";
                    feedbackElement.style.color = 'yellowgreen';
                } else if (strength === 4) {
                    feedbackElement.textContent = "Excellent! Your password is very strong.";
                    feedbackElement.style.color = 'green';
                }
                feedbackElement.style.display = 'block';
            }
        });


        document.querySelector('input[name="re_password"]').addEventListener('input', (e) => {
            const confirmPassword = e.target.value;
            const password = document.querySelector('input[name="password"]').value;
            const feedbackElement = document.getElementById('re-password-feedback');

            if (confirmPassword !== password) {
                feedbackElement.textContent = "Passwords do not match.";
                feedbackElement.style.color = 'red';
                feedbackElement.style.display = 'block';
            } else {
                feedbackElement.textContent = "Passwords match.";
                feedbackElement.style.color = 'green';
                feedbackElement.style.display = 'block';
            }
        });
    </script>
</section>
